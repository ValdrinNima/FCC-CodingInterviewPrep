[{"C:\\Users\\Valdrin\\vali\\FCC-CodingInterviewPrep\\TakeHomeProjects\\simon-game\\src\\index.js":"1","C:\\Users\\Valdrin\\vali\\FCC-CodingInterviewPrep\\TakeHomeProjects\\simon-game\\src\\App.js":"2","C:\\Users\\Valdrin\\vali\\FCC-CodingInterviewPrep\\TakeHomeProjects\\simon-game\\src\\reportWebVitals.js":"3","C:\\Users\\Valdrin\\vali\\FCC-CodingInterviewPrep\\TakeHomeProjects\\simon-game\\src\\components\\Button.js":"4","C:\\Users\\Valdrin\\vali\\FCC-CodingInterviewPrep\\TakeHomeProjects\\simon-game\\src\\components\\ControlPanel.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":3830,"mtime":1608143546935,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":1251,"mtime":1608144416377,"results":"10","hashOfConfig":"7"},{"size":1235,"mtime":1608140718513,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1o9syss",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Valdrin\\vali\\FCC-CodingInterviewPrep\\TakeHomeProjects\\simon-game\\src\\index.js",[],["24","25"],"C:\\Users\\Valdrin\\vali\\FCC-CodingInterviewPrep\\TakeHomeProjects\\simon-game\\src\\App.js",["26","27"],"import React, { useState, useEffect, useRef } from \"react\";\nimport ControlPanel from \"./components/ControlPanel\";\nimport Button from \"./components/Button\";\nimport \"./App.css\";\n\nfunction App() {\n\tconst greenButton = useRef();\n\tconst redButton = useRef();\n\tconst yellowButton = useRef();\n\tconst blueButton = useRef();\n\tconst [clickAnimation, setClickAnimation] = useState({\n\t\t\"green-clicked\": false,\n\t\t\"red-clicked\": false,\n\t\t\"yellow-clicked\": false,\n\t\t\"blue-clicked\": false,\n\t});\n\tconst buttonReferences = {\n\t\tgreen: greenButton,\n\t\tred: redButton,\n\t\tyellow: yellowButton,\n\t\tblue: blueButton,\n\t};\n\tconst [gameState, setGameState] = useState({\n\t\tpower: false,\n\t\tstart: false,\n\t\tstrict: false,\n\t\tcount: 0,\n\t\tplayerTurn: false,\n\t});\n\tconst [audio, setAudio] = useState({\n\t\tgreen: \"https://s3.amazonaws.com/freecodecamp/simonSound1.mp3\",\n\t\tred: \" https://s3.amazonaws.com/freecodecamp/simonSound2.mp3\",\n\t\tyellow: \" https://s3.amazonaws.com/freecodecamp/simonSound3.mp3\",\n\t\tblue: \" https://s3.amazonaws.com/freecodecamp/simonSound4.mp3\",\n\t});\n\tconst [playerSeries, setPlayerSeries] = useState([]);\n\tconst [gameSeries, setGameSeries] = useState([\n\t\t\"lets goooo\",\n\t\t\"green\",\n\t\t\"yellow\",\n\t\t\"blue\",\n\t\t\"red\",\n\t\t\"yellow\",\n\t\t\"green\",\n\t\t\"green\",\n\t\t\"yellow\",\n\t]);\n\n\tconst playAudio = (e) => {\n\t\tlet color = e.target.id;\n\t\t// if (gameState.playerTrun) {\n\t\t// \tsetPlayerSeries((prevState) => {\n\t\t// \t\tlet result = [...prevState];\n\t\t// \t\tresult.push(color);\n\t\t// \t\tconsole.log(\"Hello\");\n\t\t// \t\treturn result;\n\t\t// \t});\n\t\t// }\n\t\tconsole.log(color);\n\t\tconsole.log(playerSeries);\n\t\tlet sound = new Audio(audio[color]);\n\t\tsound.play();\n\t};\n\n\tconst computerMove = (colorArray) => {\n\t\tconsole.log(colorArray);\n\t\tfor (let i = 0; i < colorArray.length; i++) {\n\t\t\tcomputerExecuteMove(i);\n\t\t}\n\t\tfunction computerExecuteMove(i) {\n\t\t\tsetTimeout(function () {\n\t\t\t\tswitch (colorArray[i]) {\n\t\t\t\t\tcase \"green\":\n\t\t\t\t\t\tgreenButton.current.click();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"red\":\n\t\t\t\t\t\tredButton.current.click();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"yellow\":\n\t\t\t\t\t\tyellowButton.current.click();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"blue\":\n\t\t\t\t\t\tblueButton.current.click();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log(\"Wrong color\");\n\t\t\t\t}\n\n\t\t\t\t// On the last button press update gameState\n\t\t\t\tif (i + 1 === colorArray.length) {\n\t\t\t\t\tsetGameState((prevState) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...prevState,\n\t\t\t\t\t\t\tplayerTurn: !prevState.playerTurn,\n\t\t\t\t\t\t\tcount:\n\t\t\t\t\t\t\t\tprevState.count % 10 === 0\n\t\t\t\t\t\t\t\t\t? \"0\" + prevState.count.toString()\n\t\t\t\t\t\t\t\t\t: prevState.count.toString(),\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 1500 * i);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (gameState.start && !gameState.playerTurn) {\n\t\t\t// Add a new color to the gameSeries\n\t\t\tsetGameSeries((prevState) => {\n\t\t\t\tconst colorArray = [\"green\", \"red\", \"yellow\", \"blue\"];\n\t\t\t\tlet newColor =\n\t\t\t\t\tcolorArray[Math.floor(Math.random() * colorArray.length)];\n\t\t\t\treturn [...prevState, newColor];\n\t\t\t});\n\t\t\t// After adding new button computer plays series\n\t\t\tcomputerMove(gameSeries);\n\t\t}\n\t}, [gameState]);\n\n\tuseEffect(() => {\n\t\t// if (gameState.start && gameState.playerTurn) {\n\t\t// \tfunction playerTookTooLong() {\n\t\t// \t\talert(\"HELLOOOOO PLAYY \");\n\t\t// \t}\n\t\t// \tlet timer = setTimeout(playerTookTooLong, 5000);\n\t\t// }\n\t}, [gameState, playerSeries]);\n\n\treturn (\n\t\t<div className=\"wrapper\">\n\t\t\t<ControlPanel\n\t\t\t\tsetGameState={setGameState}\n\t\t\t\tgameState={gameState}\n\t\t\t></ControlPanel>\n\t\t\t<div className=\"game-container\">\n\t\t\t\t{[\"green\", \"red\", \"yellow\", \"blue\"].map((color) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tsetClickAnimation={setClickAnimation}\n\t\t\t\t\t\t\tclickAnimation={clickAnimation}\n\t\t\t\t\t\t\tsetPlayerSeries={setPlayerSeries}\n\t\t\t\t\t\t\tplayAudio={playAudio}\n\t\t\t\t\t\t\tgameState={gameState}\n\t\t\t\t\t\t\tkey={color}\n\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\tref={buttonReferences[color]}\n\t\t\t\t\t\t></Button>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","C:\\Users\\Valdrin\\vali\\FCC-CodingInterviewPrep\\TakeHomeProjects\\simon-game\\src\\reportWebVitals.js",[],"C:\\Users\\Valdrin\\vali\\FCC-CodingInterviewPrep\\TakeHomeProjects\\simon-game\\src\\components\\Button.js",[],"C:\\Users\\Valdrin\\vali\\FCC-CodingInterviewPrep\\TakeHomeProjects\\simon-game\\src\\components\\ControlPanel.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":30,"column":16,"nodeType":"34","messageId":"35","endLine":30,"endColumn":24},{"ruleId":"36","severity":1,"message":"37","line":118,"column":5,"nodeType":"38","endLine":118,"endColumn":16,"suggestions":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'setAudio' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gameSeries'. Either include it or remove the dependency array.","ArrayExpression",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [gameSeries, gameState]",{"range":"45","text":"46"},[2977,2988],"[gameSeries, gameState]"]